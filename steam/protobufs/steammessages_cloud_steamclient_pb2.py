# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: steam/protobufs/steammessages_cloud_steamclient.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from steam.protobufs import steammessages_unified_base_steamclient_pb2 as steam_dot_protobufs_dot_steammessages__unified__base__steamclient__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='steam/protobufs/steammessages_cloud_steamclient.proto',
  package='',
  syntax='proto2',
  serialized_options=_b('\200\001\001'),
  serialized_pb=_b('\n5steam/protobufs/steammessages_cloud_steamclient.proto\x1a<steam/protobufs/steammessages_unified_base_steamclient.proto\"d\n\"CCloud_GetUploadServerInfo_Request\x12>\n\x05\x61ppid\x18\x01 \x01(\rB/\x82\xb5\x18+App ID to which a file will be uploaded to.\"9\n#CCloud_GetUploadServerInfo_Response\x12\x12\n\nserver_url\x18\x01 \x01(\t\"\x94\x06\n\x1e\x43\x43loud_BeginHTTPUpload_Request\x12?\n\x05\x61ppid\x18\x01 \x01(\rB0\x82\xb5\x18,App ID for which the file is being uploaded.\x12\x33\n\tfile_size\x18\x02 \x01(\rB \x82\xb5\x18\x1cOriginal file size in bytes.\x12=\n\x08\x66ilename\x18\x03 \x01(\tB+\x82\xb5\x18\'Name of the file to store in the cloud.\x12V\n\x08\x66ile_sha\x18\x04 \x01(\tBD\x82\xb5\x18@Hex string (40 digits) representing the SHA1 digest of the file.\x12\\\n\tis_public\x18\x05 \x01(\x08\x42I\x82\xb5\x18\x45True if the file should be marked public on the UFS, false otherwise.\x12z\n\x11platforms_to_sync\x18\x06 \x03(\tB_\x82\xb5\x18[Array of string specifying which platforms to sync; value values: all, windows, osx, linux.\x12r\n\x15request_headers_names\x18\x07 \x03(\tBS\x82\xb5\x18ONames for headers you\'ll want to set on your upload request. May be left blank.\x12\x96\x01\n\x16request_headers_values\x18\x08 \x03(\tBv\x82\xb5\x18rValues for headers you\'ll want to set on your upload request. The number of names must equal the number of values.\"\x98\x04\n\x1f\x43\x43loud_BeginHTTPUpload_Response\x12/\n\x05ugcid\x18\x01 \x01(\x06\x42 \x82\xb5\x18\x1cUGC ID of the uploaded file.\x12\x30\n\ttimestamp\x18\x02 \x01(\x07\x42\x1d\x82\xb5\x18\x19Server timestamp of file.\x12X\n\x08url_host\x18\x03 \x01(\tBF\x82\xb5\x18\x42Host name of server to which file should be uploaded via HTTP PUT.\x12O\n\x08url_path\x18\x04 \x01(\tB=\x82\xb5\x18\x39Relative path on server to which file should be uploaded.\x12>\n\tuse_https\x18\x05 \x01(\x08\x42+\x82\xb5\x18\'If true, use https, otherwise use http.\x12{\n\x0frequest_headers\x18\x06 \x03(\x0b\x32,.CCloud_BeginHTTPUpload_Response.HTTPHeadersB4\x82\xb5\x18\x30Name-value pairs to be sent in HTTP PUT request.\x1a*\n\x0bHTTPHeaders\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t\"\xad\x04\n\x1f\x43\x43loud_CommitHTTPUpload_Request\x12\xa4\x01\n\x12transfer_succeeded\x18\x01 \x01(\x08\x42\x87\x01\x82\xb5\x18\x82\x01True if the HTTP PUT to the upload URL succeeded (URL provided in response to Cloud.BeginHTTPUpload), false if a failure occurred.\x12x\n\x05\x61ppid\x18\x02 \x01(\rBi\x82\xb5\x18\x65\x41pp ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginHTTPUpload.\x12\x95\x01\n\x08\x66ile_sha\x18\x03 \x01(\tB\x82\x01\x82\xb5\x18~Hex string (40 digits) representing the SHA1 digest of the file. Must match the SHA1 digest provided to Cloud.BeginHTTPUpload.\x12Q\n\x08\x66ilename\x18\x04 \x01(\tB?\x82\xb5\x18;Filename as specified in the Cloud.BeginHTTPUpload request.\"}\n CCloud_CommitHTTPUpload_Response\x12Y\n\x0e\x66ile_committed\x18\x01 \x01(\x08\x42\x41\x82\xb5\x18=True if the file was successfully committed, false otherwise.\"\x8c\x01\n\x1d\x43\x43loud_GetFileDetails_Request\x12;\n\x05ugcid\x18\x01 \x01(\x04\x42,\x82\xb5\x18(ID of the Cloud file to get details for.\x12.\n\x05\x61ppid\x18\x02 \x01(\rB\x1f\x82\xb5\x18\x1b\x41pp ID the file belongs to.\"\x9c\x01\n\x0f\x43\x43loud_UserFile\x12\r\n\x05\x61ppid\x18\x01 \x01(\r\x12\r\n\x05ugcid\x18\x02 \x01(\x04\x12\x10\n\x08\x66ilename\x18\x03 \x01(\t\x12\x11\n\ttimestamp\x18\x04 \x01(\x04\x12\x11\n\tfile_size\x18\x05 \x01(\r\x12\x0b\n\x03url\x18\x06 \x01(\t\x12\x17\n\x0fsteamid_creator\x18\x07 \x01(\x06\x12\r\n\x05\x66lags\x18\x08 \x01(\r\"C\n\x1e\x43\x43loud_GetFileDetails_Response\x12!\n\x07\x64\x65tails\x18\x01 \x01(\x0b\x32\x10.CCloud_UserFile\"\xe9\x03\n!CCloud_EnumerateUserFiles_Request\x12\x34\n\x05\x61ppid\x18\x01 \x01(\rB%\x82\xb5\x18!App ID to enumerate the files of.\x12\x9b\x01\n\x10\x65xtended_details\x18\x02 \x01(\x08\x42\x80\x01\x82\xb5\x18|(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found.\x12|\n\x05\x63ount\x18\x03 \x01(\rBm\x82\xb5\x18i(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned.\x12r\n\x0bstart_index\x18\x04 \x01(\rB]\x82\xb5\x18Y(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list.\"Z\n\"CCloud_EnumerateUserFiles_Response\x12\x1f\n\x05\x66iles\x18\x01 \x03(\x0b\x32\x10.CCloud_UserFile\x12\x13\n\x0btotal_files\x18\x02 \x01(\r\"Y\n\x15\x43\x43loud_Delete_Request\x12\x10\n\x08\x66ilename\x18\x01 \x01(\t\x12.\n\x05\x61ppid\x18\x02 \x01(\rB\x1f\x82\xb5\x18\x1b\x41pp ID the file belongs to.\"\x18\n\x16\x43\x43loud_Delete_Response\"\'\n%CCloud_GetClientEncryptionKey_Request\"n\n&CCloud_GetClientEncryptionKey_Response\x12\'\n\x03key\x18\x01 \x01(\x0c\x42\x1a\x82\xb5\x18\x16\x41\x45S-256 encryption key\x12\x1b\n\x03\x63rc\x18\x02 \x01(\x05\x42\x0e\x82\xb5\x18\nCRC of key\"\xaa\x01\n\x1d\x43\x43loud_CDNReport_Notification\x12\x0f\n\x07steamid\x18\x01 \x01(\x06\x12\x0b\n\x03url\x18\x02 \x01(\t\x12\x0f\n\x07success\x18\x03 \x01(\x08\x12\x18\n\x10http_status_code\x18\x04 \x01(\r\x12\x16\n\x0e\x65xpected_bytes\x18\x05 \x01(\x04\x12\x16\n\x0ereceived_bytes\x18\x06 \x01(\x04\x12\x10\n\x08\x64uration\x18\x07 \x01(\r\"\xe0\x01\n1CCloud_ExternalStorageTransferReport_Notification\x12\x0c\n\x04host\x18\x01 \x01(\t\x12\x0c\n\x04path\x18\x02 \x01(\t\x12\x11\n\tis_upload\x18\x03 \x01(\x08\x12\x0f\n\x07success\x18\x04 \x01(\x08\x12\x18\n\x10http_status_code\x18\x05 \x01(\r\x12\x16\n\x0e\x62ytes_expected\x18\x06 \x01(\x04\x12\x14\n\x0c\x62ytes_actual\x18\x07 \x01(\x04\x12\x13\n\x0b\x64uration_ms\x18\x08 \x01(\r\x12\x0e\n\x06\x63\x65llid\x18\t \x01(\r\"\xbc\x05\n$CCloud_ClientBeginFileUpload_Request\x12?\n\x05\x61ppid\x18\x01 \x01(\rB0\x82\xb5\x18,App ID for which the file is being uploaded.\x12\x44\n\tfile_size\x18\x02 \x01(\rB1\x82\xb5\x18-file size as transmitted and stored in Cloud.\x12N\n\rraw_file_size\x18\x03 \x01(\rB7\x82\xb5\x18\x33\x66ile size before any compression and/or encryption.\x12(\n\x08\x66ile_sha\x18\x04 \x01(\x0c\x42\x16\x82\xb5\x18\x12SHA-1 of raw file.\x12*\n\ntime_stamp\x18\x05 \x01(\x04\x42\x16\x82\xb5\x18\x12Timestamp of file.\x12=\n\x08\x66ilename\x18\x06 \x01(\tB+\x82\xb5\x18\'Name of the file to store in the cloud.\x12%\n\x11platforms_to_sync\x18\x07 \x01(\r:\n4294967295\x12\x46\n\x07\x63\x65ll_id\x18\t \x01(\rB5\x82\xb5\x18\x31\x43lient\'s cell ID so we can pick storage location.\x12Q\n\x0b\x63\x61n_encrypt\x18\n \x01(\x08\x42<\x82\xb5\x18\x38if true, client can encrypt the file before uploading it\x12\x66\n\x0eis_shared_file\x18\x0b \x01(\x08\x42N\x82\xb5\x18Jif true, this is going to be UGC or a screenshot or some other shared file\"\xf1\x06\n!ClientCloudFileUploadBlockDetails\x12X\n\x08url_host\x18\x01 \x01(\tBF\x82\xb5\x18\x42Host name of server to which file should be uploaded via HTTP PUT.\x12O\n\x08url_path\x18\x02 \x01(\tB=\x82\xb5\x18\x39Relative path on server to which file should be uploaded.\x12>\n\tuse_https\x18\x03 \x01(\x08\x42+\x82\xb5\x18\'If true, use https, otherwise use http.\x12;\n\x0bhttp_method\x18\x04 \x01(\x05\x42&\x82\xb5\x18\"EHTTPMethod to use for this block.\x12}\n\x0frequest_headers\x18\x05 \x03(\x0b\x32..ClientCloudFileUploadBlockDetails.HTTPHeadersB4\x82\xb5\x18\x30Name-value pairs to be sent in HTTP PUT request.\x12\x38\n\x0c\x62lock_offset\x18\x06 \x01(\x04\x42\"\x82\xb5\x18\x1eoffset of file block to upload\x12m\n\x0c\x62lock_length\x18\x07 \x01(\rBW\x82\xb5\x18Slength of file block to upload - if zero, no part of the file is part of this block\x12_\n\x12\x65xplicit_body_data\x18\x08 \x01(\x0c\x42\x43\x82\xb5\x18?explicit body data to use, instead of file data, for this block\x12o\n\x0fmay_parallelize\x18\t \x01(\x08\x42V\x82\xb5\x18Rif true, this request may be done in parallel with other similarly-marked requests\x1a*\n\x0bHTTPHeaders\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t\"\xed\x01\n%CCloud_ClientBeginFileUpload_Response\x12[\n\x0c\x65ncrypt_file\x18\x01 \x01(\x08\x42\x45\x82\xb5\x18\x41If true, the file should be encrypted by the client before upload\x12g\n\x0e\x62lock_requests\x18\x02 \x03(\x0b\x32\".ClientCloudFileUploadBlockDetailsB+\x82\xb5\x18\'HTTP requests to make to perform upload\"\xc9\x03\n%CCloud_ClientCommitFileUpload_Request\x12\x61\n\x12transfer_succeeded\x18\x01 \x01(\x08\x42\x45\x82\xb5\x18\x41True if all block uploads succeeded, false if any of them failed.\x12x\n\x05\x61ppid\x18\x02 \x01(\rBi\x82\xb5\x18\x65\x41pp ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginFileUpload.\x12p\n\x08\x66ile_sha\x18\x03 \x01(\x0c\x42^\x82\xb5\x18ZSHA1 digest of the raw file. Must match the SHA1 digest provided to Cloud.BeginFileUpload.\x12Q\n\x08\x66ilename\x18\x04 \x01(\tB?\x82\xb5\x18;Filename as specified in the Cloud.BeginFileUpload request.\"\x83\x01\n&CCloud_ClientCommitFileUpload_Response\x12Y\n\x0e\x66ile_committed\x18\x01 \x01(\x08\x42\x41\x82\xb5\x18=True if the file was successfully committed, false otherwise.\"\x80\x01\n!CCloud_ClientFileDownload_Request\x12.\n\x05\x61ppid\x18\x01 \x01(\rB\x1f\x82\xb5\x18\x1b\x41pp ID the file is part of.\x12+\n\x08\x66ilename\x18\x02 \x01(\tB\x19\x82\xb5\x18\x15\x46ilename of the file.\"\xfe\x05\n\"CCloud_ClientFileDownload_Response\x12\x32\n\x05\x61ppid\x18\x01 \x01(\rB#\x82\xb5\x18\x1f\x41pplication the file belongs to\x12G\n\tfile_size\x18\x02 \x01(\rB4\x82\xb5\x18\x30\x66ile size as transmitted and stored in the Cloud\x12G\n\rraw_file_size\x18\x03 \x01(\rB0\x82\xb5\x18,file size when decompressed and/or decrypted\x12!\n\x08sha_file\x18\x04 \x01(\x0c\x42\x0f\x82\xb5\x18\x0bSHA of file\x12)\n\ntime_stamp\x18\x05 \x01(\x04\x42\x15\x82\xb5\x18\x11Timestamp of file\x12J\n\x12is_explicit_delete\x18\x06 \x01(\x08\x42.\x82\xb5\x18*True if this is an explicitly deleted file\x12/\n\x08url_host\x18\x07 \x01(\tB\x1d\x82\xb5\x18\x19Host to GET the file from\x12O\n\x08url_path\x18\x08 \x01(\tB=\x82\xb5\x18\x39Path on that host to use, including URL parameters if any\x12\x37\n\tuse_https\x18\t \x01(\x08\x42$\x82\xb5\x18 If set, use HTTPS, else use HTTP\x12~\n\x0frequest_headers\x18\n \x03(\x0b\x32/.CCloud_ClientFileDownload_Response.HTTPHeadersB4\x82\xb5\x18\x30Name-value pairs to be sent in HTTP GET request.\x12\x11\n\tencrypted\x18\x0b \x01(\x08\x1a*\n\x0bHTTPHeaders\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t\"\xe3\x01\n\x1f\x43\x43loud_ClientDeleteFile_Request\x12>\n\x05\x61ppid\x18\x01 \x01(\rB/\x82\xb5\x18+App ID for which the file is being deleted.\x12\'\n\x08\x66ilename\x18\x02 \x01(\tB\x15\x82\xb5\x18\x11\x46ilename of file.\x12W\n\x12is_explicit_delete\x18\x03 \x01(\x08\x42;\x82\xb5\x18\x37If true, this is a \'delete\'; if false, it is a \'forget\'\"\"\n CCloud_ClientDeleteFile_Response\"\xe0\x01\n,CCloud_ClientConflictResolution_Notification\x12>\n\x05\x61ppid\x18\x01 \x01(\rB/\x82\xb5\x18+App ID for which the conflict was resolved.\x12p\n\x11\x63hose_local_files\x18\x02 \x01(\x08\x42U\x82\xb5\x18QDid the user choose to keep the files local to the machine they are on right now?\"\"\n CCloud_EnumerateUserApps_Request\"\x98\x01\n!CCloud_EnumerateUserApps_Response\x12\x35\n\x04\x61pps\x18\x01 \x03(\x0b\x32\'.CCloud_EnumerateUserApps_Response.Apps\x1a<\n\x04\x41pps\x12\r\n\x05\x61ppid\x18\x01 \x01(\r\x12\x12\n\ntotalcount\x18\x02 \x01(\x05\x12\x11\n\ttotalsize\x18\x03 \x01(\x03\x32\xab\x12\n\x05\x43loud\x12\x9c\x01\n\x13GetUploadServerInfo\x12#.CCloud_GetUploadServerInfo_Request\x1a$.CCloud_GetUploadServerInfo_Response\":\x82\xb5\x18\x36Returns the URL of the proper cloud server for a user.\x12\xa8\x02\n\x0f\x42\x65ginHTTPUpload\x12\x1f.CCloud_BeginHTTPUpload_Request\x1a .CCloud_BeginHTTPUpload_Response\"\xd1\x01\x82\xb5\x18\xcc\x01\x42\x65gins the process of uploading a file to Steam external storage services. File should be uploaded via HTTP PUT to the returned URL, after which the upload must be finalized by a call to CommitHTTPUpload.\x12\xad\x01\n\x10\x43ommitHTTPUpload\x12 .CCloud_CommitHTTPUpload_Request\x1a!.CCloud_CommitHTTPUpload_Response\"T\x82\xb5\x18PCommits a file upload initiated by BeginHTTPUpload and transferred via HTTP PUT.\x12w\n\x0eGetFileDetails\x12\x1e.CCloud_GetFileDetails_Request\x1a\x1f.CCloud_GetFileDetails_Response\"$\x82\xb5\x18 Returns details on a Cloud file.\x12\xba\x01\n\x12\x45numerateUserFiles\x12\".CCloud_EnumerateUserFiles_Request\x1a#.CCloud_EnumerateUserFiles_Response\"[\x82\xb5\x18WEnumerates Cloud files for a user of a given app ID. Returns up to 500 files at a time.\x12\x64\n\x06\x44\x65lete\x12\x16.CCloud_Delete_Request\x1a\x17.CCloud_Delete_Response\")\x82\xb5\x18%Deletes a file from the user\'s cloud.\x12\x99\x01\n\x16GetClientEncryptionKey\x12&.CCloud_GetClientEncryptionKey_Request\x1a\'.CCloud_GetClientEncryptionKey_Response\".\x82\xb5\x18*Gets the user\'s Cloud file encryption key.\x12\x63\n\tCDNReport\x12\x1e.CCloud_CDNReport_Notification\x1a\x0b.NoResponse\")\x82\xb5\x18%Reports the result of a CDN transfer.\x12\x9f\x01\n\x1d\x45xternalStorageTransferReport\x12\x32.CCloud_ExternalStorageTransferReport_Notification\x1a\x0b.NoResponse\"=\x82\xb5\x18\x39Reports the result of an external Cloud storage transfer.\x12\x88\x01\n\x15\x43lientBeginFileUpload\x12%.CCloud_ClientBeginFileUpload_Request\x1a&.CCloud_ClientBeginFileUpload_Response\" \x82\xb5\x18\x1cInitiate an upload to Cloud.\x12\x9a\x01\n\x16\x43lientCommitFileUpload\x12&.CCloud_ClientCommitFileUpload_Request\x1a\'.CCloud_ClientCommitFileUpload_Response\"/\x82\xb5\x18+Commit the file upload or indicate failure.\x12|\n\x12\x43lientFileDownload\x12\".CCloud_ClientFileDownload_Request\x1a#.CCloud_ClientFileDownload_Response\"\x1d\x82\xb5\x18\x19Initiate a file download.\x12u\n\x10\x43lientDeleteFile\x12 .CCloud_ClientDeleteFile_Request\x1a!.CCloud_ClientDeleteFile_Response\"\x1c\x82\xb5\x18\x18\x44\x65lete or forget a file.\x12\x8e\x01\n\x18\x43lientConflictResolution\x12-.CCloud_ClientConflictResolution_Notification\x1a\x0b.NoResponse\"6\x82\xb5\x18\x32User has picked a resolution for a Cloud conflict.\x12\x8f\x01\n\x11\x45numerateUserApps\x12!.CCloud_EnumerateUserApps_Request\x1a\".CCloud_EnumerateUserApps_Response\"3\x82\xb5\x18/Enumerates apps stroing cloud files for a user.\x1a)\x82\xb5\x18%A service for Steam Cloud operations.B\x03\x80\x01\x01')
  ,
  dependencies=[steam_dot_protobufs_dot_steammessages__unified__base__steamclient__pb2.DESCRIPTOR,])




_CCLOUD_GETUPLOADSERVERINFO_REQUEST = _descriptor.Descriptor(
  name='CCloud_GetUploadServerInfo_Request',
  full_name='CCloud_GetUploadServerInfo_Request',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='appid', full_name='CCloud_GetUploadServerInfo_Request.appid', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030+App ID to which a file will be uploaded to.'), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=119,
  serialized_end=219,
)


_CCLOUD_GETUPLOADSERVERINFO_RESPONSE = _descriptor.Descriptor(
  name='CCloud_GetUploadServerInfo_Response',
  full_name='CCloud_GetUploadServerInfo_Response',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='server_url', full_name='CCloud_GetUploadServerInfo_Response.server_url', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=221,
  serialized_end=278,
)


_CCLOUD_BEGINHTTPUPLOAD_REQUEST = _descriptor.Descriptor(
  name='CCloud_BeginHTTPUpload_Request',
  full_name='CCloud_BeginHTTPUpload_Request',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='appid', full_name='CCloud_BeginHTTPUpload_Request.appid', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030,App ID for which the file is being uploaded.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='file_size', full_name='CCloud_BeginHTTPUpload_Request.file_size', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030\034Original file size in bytes.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='filename', full_name='CCloud_BeginHTTPUpload_Request.filename', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030\'Name of the file to store in the cloud.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='file_sha', full_name='CCloud_BeginHTTPUpload_Request.file_sha', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030@Hex string (40 digits) representing the SHA1 digest of the file.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='is_public', full_name='CCloud_BeginHTTPUpload_Request.is_public', index=4,
      number=5, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030ETrue if the file should be marked public on the UFS, false otherwise.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='platforms_to_sync', full_name='CCloud_BeginHTTPUpload_Request.platforms_to_sync', index=5,
      number=6, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030[Array of string specifying which platforms to sync; value values: all, windows, osx, linux.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='request_headers_names', full_name='CCloud_BeginHTTPUpload_Request.request_headers_names', index=6,
      number=7, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030ONames for headers you\'ll want to set on your upload request. May be left blank.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='request_headers_values', full_name='CCloud_BeginHTTPUpload_Request.request_headers_values', index=7,
      number=8, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030rValues for headers you\'ll want to set on your upload request. The number of names must equal the number of values.'), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=281,
  serialized_end=1069,
)


_CCLOUD_BEGINHTTPUPLOAD_RESPONSE_HTTPHEADERS = _descriptor.Descriptor(
  name='HTTPHeaders',
  full_name='CCloud_BeginHTTPUpload_Response.HTTPHeaders',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='CCloud_BeginHTTPUpload_Response.HTTPHeaders.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='value', full_name='CCloud_BeginHTTPUpload_Response.HTTPHeaders.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1566,
  serialized_end=1608,
)

_CCLOUD_BEGINHTTPUPLOAD_RESPONSE = _descriptor.Descriptor(
  name='CCloud_BeginHTTPUpload_Response',
  full_name='CCloud_BeginHTTPUpload_Response',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ugcid', full_name='CCloud_BeginHTTPUpload_Response.ugcid', index=0,
      number=1, type=6, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030\034UGC ID of the uploaded file.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='timestamp', full_name='CCloud_BeginHTTPUpload_Response.timestamp', index=1,
      number=2, type=7, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030\031Server timestamp of file.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='url_host', full_name='CCloud_BeginHTTPUpload_Response.url_host', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030BHost name of server to which file should be uploaded via HTTP PUT.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='url_path', full_name='CCloud_BeginHTTPUpload_Response.url_path', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\0309Relative path on server to which file should be uploaded.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='use_https', full_name='CCloud_BeginHTTPUpload_Response.use_https', index=4,
      number=5, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030\'If true, use https, otherwise use http.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='request_headers', full_name='CCloud_BeginHTTPUpload_Response.request_headers', index=5,
      number=6, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\0300Name-value pairs to be sent in HTTP PUT request.'), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[_CCLOUD_BEGINHTTPUPLOAD_RESPONSE_HTTPHEADERS, ],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1072,
  serialized_end=1608,
)


_CCLOUD_COMMITHTTPUPLOAD_REQUEST = _descriptor.Descriptor(
  name='CCloud_CommitHTTPUpload_Request',
  full_name='CCloud_CommitHTTPUpload_Request',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='transfer_succeeded', full_name='CCloud_CommitHTTPUpload_Request.transfer_succeeded', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030\202\001True if the HTTP PUT to the upload URL succeeded (URL provided in response to Cloud.BeginHTTPUpload), false if a failure occurred.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='appid', full_name='CCloud_CommitHTTPUpload_Request.appid', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030eApp ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginHTTPUpload.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='file_sha', full_name='CCloud_CommitHTTPUpload_Request.file_sha', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030~Hex string (40 digits) representing the SHA1 digest of the file. Must match the SHA1 digest provided to Cloud.BeginHTTPUpload.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='filename', full_name='CCloud_CommitHTTPUpload_Request.filename', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030;Filename as specified in the Cloud.BeginHTTPUpload request.'), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1611,
  serialized_end=2168,
)


_CCLOUD_COMMITHTTPUPLOAD_RESPONSE = _descriptor.Descriptor(
  name='CCloud_CommitHTTPUpload_Response',
  full_name='CCloud_CommitHTTPUpload_Response',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='file_committed', full_name='CCloud_CommitHTTPUpload_Response.file_committed', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030=True if the file was successfully committed, false otherwise.'), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2170,
  serialized_end=2295,
)


_CCLOUD_GETFILEDETAILS_REQUEST = _descriptor.Descriptor(
  name='CCloud_GetFileDetails_Request',
  full_name='CCloud_GetFileDetails_Request',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ugcid', full_name='CCloud_GetFileDetails_Request.ugcid', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030(ID of the Cloud file to get details for.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='appid', full_name='CCloud_GetFileDetails_Request.appid', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030\033App ID the file belongs to.'), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2298,
  serialized_end=2438,
)


_CCLOUD_USERFILE = _descriptor.Descriptor(
  name='CCloud_UserFile',
  full_name='CCloud_UserFile',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='appid', full_name='CCloud_UserFile.appid', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='ugcid', full_name='CCloud_UserFile.ugcid', index=1,
      number=2, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='filename', full_name='CCloud_UserFile.filename', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='timestamp', full_name='CCloud_UserFile.timestamp', index=3,
      number=4, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='file_size', full_name='CCloud_UserFile.file_size', index=4,
      number=5, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='url', full_name='CCloud_UserFile.url', index=5,
      number=6, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='steamid_creator', full_name='CCloud_UserFile.steamid_creator', index=6,
      number=7, type=6, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='flags', full_name='CCloud_UserFile.flags', index=7,
      number=8, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2441,
  serialized_end=2597,
)


_CCLOUD_GETFILEDETAILS_RESPONSE = _descriptor.Descriptor(
  name='CCloud_GetFileDetails_Response',
  full_name='CCloud_GetFileDetails_Response',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='details', full_name='CCloud_GetFileDetails_Response.details', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2599,
  serialized_end=2666,
)


_CCLOUD_ENUMERATEUSERFILES_REQUEST = _descriptor.Descriptor(
  name='CCloud_EnumerateUserFiles_Request',
  full_name='CCloud_EnumerateUserFiles_Request',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='appid', full_name='CCloud_EnumerateUserFiles_Request.appid', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030!App ID to enumerate the files of.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='extended_details', full_name='CCloud_EnumerateUserFiles_Request.extended_details', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030|(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='count', full_name='CCloud_EnumerateUserFiles_Request.count', index=2,
      number=3, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030i(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='start_index', full_name='CCloud_EnumerateUserFiles_Request.start_index', index=3,
      number=4, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030Y(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list.'), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2669,
  serialized_end=3158,
)


_CCLOUD_ENUMERATEUSERFILES_RESPONSE = _descriptor.Descriptor(
  name='CCloud_EnumerateUserFiles_Response',
  full_name='CCloud_EnumerateUserFiles_Response',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='files', full_name='CCloud_EnumerateUserFiles_Response.files', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='total_files', full_name='CCloud_EnumerateUserFiles_Response.total_files', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3160,
  serialized_end=3250,
)


_CCLOUD_DELETE_REQUEST = _descriptor.Descriptor(
  name='CCloud_Delete_Request',
  full_name='CCloud_Delete_Request',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='filename', full_name='CCloud_Delete_Request.filename', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='appid', full_name='CCloud_Delete_Request.appid', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030\033App ID the file belongs to.'), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3252,
  serialized_end=3341,
)


_CCLOUD_DELETE_RESPONSE = _descriptor.Descriptor(
  name='CCloud_Delete_Response',
  full_name='CCloud_Delete_Response',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3343,
  serialized_end=3367,
)


_CCLOUD_GETCLIENTENCRYPTIONKEY_REQUEST = _descriptor.Descriptor(
  name='CCloud_GetClientEncryptionKey_Request',
  full_name='CCloud_GetClientEncryptionKey_Request',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3369,
  serialized_end=3408,
)


_CCLOUD_GETCLIENTENCRYPTIONKEY_RESPONSE = _descriptor.Descriptor(
  name='CCloud_GetClientEncryptionKey_Response',
  full_name='CCloud_GetClientEncryptionKey_Response',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='CCloud_GetClientEncryptionKey_Response.key', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030\026AES-256 encryption key'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='crc', full_name='CCloud_GetClientEncryptionKey_Response.crc', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030\nCRC of key'), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3410,
  serialized_end=3520,
)


_CCLOUD_CDNREPORT_NOTIFICATION = _descriptor.Descriptor(
  name='CCloud_CDNReport_Notification',
  full_name='CCloud_CDNReport_Notification',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='steamid', full_name='CCloud_CDNReport_Notification.steamid', index=0,
      number=1, type=6, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='url', full_name='CCloud_CDNReport_Notification.url', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='success', full_name='CCloud_CDNReport_Notification.success', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='http_status_code', full_name='CCloud_CDNReport_Notification.http_status_code', index=3,
      number=4, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='expected_bytes', full_name='CCloud_CDNReport_Notification.expected_bytes', index=4,
      number=5, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='received_bytes', full_name='CCloud_CDNReport_Notification.received_bytes', index=5,
      number=6, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='duration', full_name='CCloud_CDNReport_Notification.duration', index=6,
      number=7, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3523,
  serialized_end=3693,
)


_CCLOUD_EXTERNALSTORAGETRANSFERREPORT_NOTIFICATION = _descriptor.Descriptor(
  name='CCloud_ExternalStorageTransferReport_Notification',
  full_name='CCloud_ExternalStorageTransferReport_Notification',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='host', full_name='CCloud_ExternalStorageTransferReport_Notification.host', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='path', full_name='CCloud_ExternalStorageTransferReport_Notification.path', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='is_upload', full_name='CCloud_ExternalStorageTransferReport_Notification.is_upload', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='success', full_name='CCloud_ExternalStorageTransferReport_Notification.success', index=3,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='http_status_code', full_name='CCloud_ExternalStorageTransferReport_Notification.http_status_code', index=4,
      number=5, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='bytes_expected', full_name='CCloud_ExternalStorageTransferReport_Notification.bytes_expected', index=5,
      number=6, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='bytes_actual', full_name='CCloud_ExternalStorageTransferReport_Notification.bytes_actual', index=6,
      number=7, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='duration_ms', full_name='CCloud_ExternalStorageTransferReport_Notification.duration_ms', index=7,
      number=8, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='cellid', full_name='CCloud_ExternalStorageTransferReport_Notification.cellid', index=8,
      number=9, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3696,
  serialized_end=3920,
)


_CCLOUD_CLIENTBEGINFILEUPLOAD_REQUEST = _descriptor.Descriptor(
  name='CCloud_ClientBeginFileUpload_Request',
  full_name='CCloud_ClientBeginFileUpload_Request',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='appid', full_name='CCloud_ClientBeginFileUpload_Request.appid', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030,App ID for which the file is being uploaded.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='file_size', full_name='CCloud_ClientBeginFileUpload_Request.file_size', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030-file size as transmitted and stored in Cloud.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='raw_file_size', full_name='CCloud_ClientBeginFileUpload_Request.raw_file_size', index=2,
      number=3, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\0303file size before any compression and/or encryption.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='file_sha', full_name='CCloud_ClientBeginFileUpload_Request.file_sha', index=3,
      number=4, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030\022SHA-1 of raw file.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='time_stamp', full_name='CCloud_ClientBeginFileUpload_Request.time_stamp', index=4,
      number=5, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030\022Timestamp of file.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='filename', full_name='CCloud_ClientBeginFileUpload_Request.filename', index=5,
      number=6, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030\'Name of the file to store in the cloud.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='platforms_to_sync', full_name='CCloud_ClientBeginFileUpload_Request.platforms_to_sync', index=6,
      number=7, type=13, cpp_type=3, label=1,
      has_default_value=True, default_value=4294967295,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='cell_id', full_name='CCloud_ClientBeginFileUpload_Request.cell_id', index=7,
      number=9, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\0301Client\'s cell ID so we can pick storage location.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='can_encrypt', full_name='CCloud_ClientBeginFileUpload_Request.can_encrypt', index=8,
      number=10, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\0308if true, client can encrypt the file before uploading it'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='is_shared_file', full_name='CCloud_ClientBeginFileUpload_Request.is_shared_file', index=9,
      number=11, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030Jif true, this is going to be UGC or a screenshot or some other shared file'), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3923,
  serialized_end=4623,
)


_CLIENTCLOUDFILEUPLOADBLOCKDETAILS_HTTPHEADERS = _descriptor.Descriptor(
  name='HTTPHeaders',
  full_name='ClientCloudFileUploadBlockDetails.HTTPHeaders',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='ClientCloudFileUploadBlockDetails.HTTPHeaders.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='value', full_name='ClientCloudFileUploadBlockDetails.HTTPHeaders.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1566,
  serialized_end=1608,
)

_CLIENTCLOUDFILEUPLOADBLOCKDETAILS = _descriptor.Descriptor(
  name='ClientCloudFileUploadBlockDetails',
  full_name='ClientCloudFileUploadBlockDetails',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='url_host', full_name='ClientCloudFileUploadBlockDetails.url_host', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030BHost name of server to which file should be uploaded via HTTP PUT.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='url_path', full_name='ClientCloudFileUploadBlockDetails.url_path', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\0309Relative path on server to which file should be uploaded.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='use_https', full_name='ClientCloudFileUploadBlockDetails.use_https', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030\'If true, use https, otherwise use http.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='http_method', full_name='ClientCloudFileUploadBlockDetails.http_method', index=3,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030\"EHTTPMethod to use for this block.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='request_headers', full_name='ClientCloudFileUploadBlockDetails.request_headers', index=4,
      number=5, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\0300Name-value pairs to be sent in HTTP PUT request.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='block_offset', full_name='ClientCloudFileUploadBlockDetails.block_offset', index=5,
      number=6, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030\036offset of file block to upload'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='block_length', full_name='ClientCloudFileUploadBlockDetails.block_length', index=6,
      number=7, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030Slength of file block to upload - if zero, no part of the file is part of this block'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='explicit_body_data', full_name='ClientCloudFileUploadBlockDetails.explicit_body_data', index=7,
      number=8, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030?explicit body data to use, instead of file data, for this block'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='may_parallelize', full_name='ClientCloudFileUploadBlockDetails.may_parallelize', index=8,
      number=9, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030Rif true, this request may be done in parallel with other similarly-marked requests'), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[_CLIENTCLOUDFILEUPLOADBLOCKDETAILS_HTTPHEADERS, ],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4626,
  serialized_end=5507,
)


_CCLOUD_CLIENTBEGINFILEUPLOAD_RESPONSE = _descriptor.Descriptor(
  name='CCloud_ClientBeginFileUpload_Response',
  full_name='CCloud_ClientBeginFileUpload_Response',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='encrypt_file', full_name='CCloud_ClientBeginFileUpload_Response.encrypt_file', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030AIf true, the file should be encrypted by the client before upload'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='block_requests', full_name='CCloud_ClientBeginFileUpload_Response.block_requests', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030\'HTTP requests to make to perform upload'), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=5510,
  serialized_end=5747,
)


_CCLOUD_CLIENTCOMMITFILEUPLOAD_REQUEST = _descriptor.Descriptor(
  name='CCloud_ClientCommitFileUpload_Request',
  full_name='CCloud_ClientCommitFileUpload_Request',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='transfer_succeeded', full_name='CCloud_ClientCommitFileUpload_Request.transfer_succeeded', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030ATrue if all block uploads succeeded, false if any of them failed.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='appid', full_name='CCloud_ClientCommitFileUpload_Request.appid', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030eApp ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginFileUpload.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='file_sha', full_name='CCloud_ClientCommitFileUpload_Request.file_sha', index=2,
      number=3, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030ZSHA1 digest of the raw file. Must match the SHA1 digest provided to Cloud.BeginFileUpload.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='filename', full_name='CCloud_ClientCommitFileUpload_Request.filename', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030;Filename as specified in the Cloud.BeginFileUpload request.'), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=5750,
  serialized_end=6207,
)


_CCLOUD_CLIENTCOMMITFILEUPLOAD_RESPONSE = _descriptor.Descriptor(
  name='CCloud_ClientCommitFileUpload_Response',
  full_name='CCloud_ClientCommitFileUpload_Response',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='file_committed', full_name='CCloud_ClientCommitFileUpload_Response.file_committed', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030=True if the file was successfully committed, false otherwise.'), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=6210,
  serialized_end=6341,
)


_CCLOUD_CLIENTFILEDOWNLOAD_REQUEST = _descriptor.Descriptor(
  name='CCloud_ClientFileDownload_Request',
  full_name='CCloud_ClientFileDownload_Request',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='appid', full_name='CCloud_ClientFileDownload_Request.appid', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030\033App ID the file is part of.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='filename', full_name='CCloud_ClientFileDownload_Request.filename', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030\025Filename of the file.'), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=6344,
  serialized_end=6472,
)


_CCLOUD_CLIENTFILEDOWNLOAD_RESPONSE_HTTPHEADERS = _descriptor.Descriptor(
  name='HTTPHeaders',
  full_name='CCloud_ClientFileDownload_Response.HTTPHeaders',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='CCloud_ClientFileDownload_Response.HTTPHeaders.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='value', full_name='CCloud_ClientFileDownload_Response.HTTPHeaders.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1566,
  serialized_end=1608,
)

_CCLOUD_CLIENTFILEDOWNLOAD_RESPONSE = _descriptor.Descriptor(
  name='CCloud_ClientFileDownload_Response',
  full_name='CCloud_ClientFileDownload_Response',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='appid', full_name='CCloud_ClientFileDownload_Response.appid', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030\037Application the file belongs to'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='file_size', full_name='CCloud_ClientFileDownload_Response.file_size', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\0300file size as transmitted and stored in the Cloud'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='raw_file_size', full_name='CCloud_ClientFileDownload_Response.raw_file_size', index=2,
      number=3, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030,file size when decompressed and/or decrypted'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='sha_file', full_name='CCloud_ClientFileDownload_Response.sha_file', index=3,
      number=4, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030\013SHA of file'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='time_stamp', full_name='CCloud_ClientFileDownload_Response.time_stamp', index=4,
      number=5, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030\021Timestamp of file'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='is_explicit_delete', full_name='CCloud_ClientFileDownload_Response.is_explicit_delete', index=5,
      number=6, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030*True if this is an explicitly deleted file'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='url_host', full_name='CCloud_ClientFileDownload_Response.url_host', index=6,
      number=7, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030\031Host to GET the file from'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='url_path', full_name='CCloud_ClientFileDownload_Response.url_path', index=7,
      number=8, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\0309Path on that host to use, including URL parameters if any'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='use_https', full_name='CCloud_ClientFileDownload_Response.use_https', index=8,
      number=9, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030 If set, use HTTPS, else use HTTP'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='request_headers', full_name='CCloud_ClientFileDownload_Response.request_headers', index=9,
      number=10, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\0300Name-value pairs to be sent in HTTP GET request.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='encrypted', full_name='CCloud_ClientFileDownload_Response.encrypted', index=10,
      number=11, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[_CCLOUD_CLIENTFILEDOWNLOAD_RESPONSE_HTTPHEADERS, ],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=6475,
  serialized_end=7241,
)


_CCLOUD_CLIENTDELETEFILE_REQUEST = _descriptor.Descriptor(
  name='CCloud_ClientDeleteFile_Request',
  full_name='CCloud_ClientDeleteFile_Request',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='appid', full_name='CCloud_ClientDeleteFile_Request.appid', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030+App ID for which the file is being deleted.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='filename', full_name='CCloud_ClientDeleteFile_Request.filename', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030\021Filename of file.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='is_explicit_delete', full_name='CCloud_ClientDeleteFile_Request.is_explicit_delete', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\0307If true, this is a \'delete\'; if false, it is a \'forget\''), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=7244,
  serialized_end=7471,
)


_CCLOUD_CLIENTDELETEFILE_RESPONSE = _descriptor.Descriptor(
  name='CCloud_ClientDeleteFile_Response',
  full_name='CCloud_ClientDeleteFile_Response',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=7473,
  serialized_end=7507,
)


_CCLOUD_CLIENTCONFLICTRESOLUTION_NOTIFICATION = _descriptor.Descriptor(
  name='CCloud_ClientConflictResolution_Notification',
  full_name='CCloud_ClientConflictResolution_Notification',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='appid', full_name='CCloud_ClientConflictResolution_Notification.appid', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030+App ID for which the conflict was resolved.'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='chose_local_files', full_name='CCloud_ClientConflictResolution_Notification.chose_local_files', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\202\265\030QDid the user choose to keep the files local to the machine they are on right now?'), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=7510,
  serialized_end=7734,
)


_CCLOUD_ENUMERATEUSERAPPS_REQUEST = _descriptor.Descriptor(
  name='CCloud_EnumerateUserApps_Request',
  full_name='CCloud_EnumerateUserApps_Request',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=7736,
  serialized_end=7770,
)


_CCLOUD_ENUMERATEUSERAPPS_RESPONSE_APPS = _descriptor.Descriptor(
  name='Apps',
  full_name='CCloud_EnumerateUserApps_Response.Apps',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='appid', full_name='CCloud_EnumerateUserApps_Response.Apps.appid', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='totalcount', full_name='CCloud_EnumerateUserApps_Response.Apps.totalcount', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='totalsize', full_name='CCloud_EnumerateUserApps_Response.Apps.totalsize', index=2,
      number=3, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=7865,
  serialized_end=7925,
)

_CCLOUD_ENUMERATEUSERAPPS_RESPONSE = _descriptor.Descriptor(
  name='CCloud_EnumerateUserApps_Response',
  full_name='CCloud_EnumerateUserApps_Response',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='apps', full_name='CCloud_EnumerateUserApps_Response.apps', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[_CCLOUD_ENUMERATEUSERAPPS_RESPONSE_APPS, ],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=7773,
  serialized_end=7925,
)

_CCLOUD_BEGINHTTPUPLOAD_RESPONSE_HTTPHEADERS.containing_type = _CCLOUD_BEGINHTTPUPLOAD_RESPONSE
_CCLOUD_BEGINHTTPUPLOAD_RESPONSE.fields_by_name['request_headers'].message_type = _CCLOUD_BEGINHTTPUPLOAD_RESPONSE_HTTPHEADERS
_CCLOUD_GETFILEDETAILS_RESPONSE.fields_by_name['details'].message_type = _CCLOUD_USERFILE
_CCLOUD_ENUMERATEUSERFILES_RESPONSE.fields_by_name['files'].message_type = _CCLOUD_USERFILE
_CLIENTCLOUDFILEUPLOADBLOCKDETAILS_HTTPHEADERS.containing_type = _CLIENTCLOUDFILEUPLOADBLOCKDETAILS
_CLIENTCLOUDFILEUPLOADBLOCKDETAILS.fields_by_name['request_headers'].message_type = _CLIENTCLOUDFILEUPLOADBLOCKDETAILS_HTTPHEADERS
_CCLOUD_CLIENTBEGINFILEUPLOAD_RESPONSE.fields_by_name['block_requests'].message_type = _CLIENTCLOUDFILEUPLOADBLOCKDETAILS
_CCLOUD_CLIENTFILEDOWNLOAD_RESPONSE_HTTPHEADERS.containing_type = _CCLOUD_CLIENTFILEDOWNLOAD_RESPONSE
_CCLOUD_CLIENTFILEDOWNLOAD_RESPONSE.fields_by_name['request_headers'].message_type = _CCLOUD_CLIENTFILEDOWNLOAD_RESPONSE_HTTPHEADERS
_CCLOUD_ENUMERATEUSERAPPS_RESPONSE_APPS.containing_type = _CCLOUD_ENUMERATEUSERAPPS_RESPONSE
_CCLOUD_ENUMERATEUSERAPPS_RESPONSE.fields_by_name['apps'].message_type = _CCLOUD_ENUMERATEUSERAPPS_RESPONSE_APPS
DESCRIPTOR.message_types_by_name['CCloud_GetUploadServerInfo_Request'] = _CCLOUD_GETUPLOADSERVERINFO_REQUEST
DESCRIPTOR.message_types_by_name['CCloud_GetUploadServerInfo_Response'] = _CCLOUD_GETUPLOADSERVERINFO_RESPONSE
DESCRIPTOR.message_types_by_name['CCloud_BeginHTTPUpload_Request'] = _CCLOUD_BEGINHTTPUPLOAD_REQUEST
DESCRIPTOR.message_types_by_name['CCloud_BeginHTTPUpload_Response'] = _CCLOUD_BEGINHTTPUPLOAD_RESPONSE
DESCRIPTOR.message_types_by_name['CCloud_CommitHTTPUpload_Request'] = _CCLOUD_COMMITHTTPUPLOAD_REQUEST
DESCRIPTOR.message_types_by_name['CCloud_CommitHTTPUpload_Response'] = _CCLOUD_COMMITHTTPUPLOAD_RESPONSE
DESCRIPTOR.message_types_by_name['CCloud_GetFileDetails_Request'] = _CCLOUD_GETFILEDETAILS_REQUEST
DESCRIPTOR.message_types_by_name['CCloud_UserFile'] = _CCLOUD_USERFILE
DESCRIPTOR.message_types_by_name['CCloud_GetFileDetails_Response'] = _CCLOUD_GETFILEDETAILS_RESPONSE
DESCRIPTOR.message_types_by_name['CCloud_EnumerateUserFiles_Request'] = _CCLOUD_ENUMERATEUSERFILES_REQUEST
DESCRIPTOR.message_types_by_name['CCloud_EnumerateUserFiles_Response'] = _CCLOUD_ENUMERATEUSERFILES_RESPONSE
DESCRIPTOR.message_types_by_name['CCloud_Delete_Request'] = _CCLOUD_DELETE_REQUEST
DESCRIPTOR.message_types_by_name['CCloud_Delete_Response'] = _CCLOUD_DELETE_RESPONSE
DESCRIPTOR.message_types_by_name['CCloud_GetClientEncryptionKey_Request'] = _CCLOUD_GETCLIENTENCRYPTIONKEY_REQUEST
DESCRIPTOR.message_types_by_name['CCloud_GetClientEncryptionKey_Response'] = _CCLOUD_GETCLIENTENCRYPTIONKEY_RESPONSE
DESCRIPTOR.message_types_by_name['CCloud_CDNReport_Notification'] = _CCLOUD_CDNREPORT_NOTIFICATION
DESCRIPTOR.message_types_by_name['CCloud_ExternalStorageTransferReport_Notification'] = _CCLOUD_EXTERNALSTORAGETRANSFERREPORT_NOTIFICATION
DESCRIPTOR.message_types_by_name['CCloud_ClientBeginFileUpload_Request'] = _CCLOUD_CLIENTBEGINFILEUPLOAD_REQUEST
DESCRIPTOR.message_types_by_name['ClientCloudFileUploadBlockDetails'] = _CLIENTCLOUDFILEUPLOADBLOCKDETAILS
DESCRIPTOR.message_types_by_name['CCloud_ClientBeginFileUpload_Response'] = _CCLOUD_CLIENTBEGINFILEUPLOAD_RESPONSE
DESCRIPTOR.message_types_by_name['CCloud_ClientCommitFileUpload_Request'] = _CCLOUD_CLIENTCOMMITFILEUPLOAD_REQUEST
DESCRIPTOR.message_types_by_name['CCloud_ClientCommitFileUpload_Response'] = _CCLOUD_CLIENTCOMMITFILEUPLOAD_RESPONSE
DESCRIPTOR.message_types_by_name['CCloud_ClientFileDownload_Request'] = _CCLOUD_CLIENTFILEDOWNLOAD_REQUEST
DESCRIPTOR.message_types_by_name['CCloud_ClientFileDownload_Response'] = _CCLOUD_CLIENTFILEDOWNLOAD_RESPONSE
DESCRIPTOR.message_types_by_name['CCloud_ClientDeleteFile_Request'] = _CCLOUD_CLIENTDELETEFILE_REQUEST
DESCRIPTOR.message_types_by_name['CCloud_ClientDeleteFile_Response'] = _CCLOUD_CLIENTDELETEFILE_RESPONSE
DESCRIPTOR.message_types_by_name['CCloud_ClientConflictResolution_Notification'] = _CCLOUD_CLIENTCONFLICTRESOLUTION_NOTIFICATION
DESCRIPTOR.message_types_by_name['CCloud_EnumerateUserApps_Request'] = _CCLOUD_ENUMERATEUSERAPPS_REQUEST
DESCRIPTOR.message_types_by_name['CCloud_EnumerateUserApps_Response'] = _CCLOUD_ENUMERATEUSERAPPS_RESPONSE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

CCloud_GetUploadServerInfo_Request = _reflection.GeneratedProtocolMessageType('CCloud_GetUploadServerInfo_Request', (_message.Message,), dict(
  DESCRIPTOR = _CCLOUD_GETUPLOADSERVERINFO_REQUEST,
  __module__ = 'steam.protobufs.steammessages_cloud_steamclient_pb2'
  # @@protoc_insertion_point(class_scope:CCloud_GetUploadServerInfo_Request)
  ))
_sym_db.RegisterMessage(CCloud_GetUploadServerInfo_Request)

CCloud_GetUploadServerInfo_Response = _reflection.GeneratedProtocolMessageType('CCloud_GetUploadServerInfo_Response', (_message.Message,), dict(
  DESCRIPTOR = _CCLOUD_GETUPLOADSERVERINFO_RESPONSE,
  __module__ = 'steam.protobufs.steammessages_cloud_steamclient_pb2'
  # @@protoc_insertion_point(class_scope:CCloud_GetUploadServerInfo_Response)
  ))
_sym_db.RegisterMessage(CCloud_GetUploadServerInfo_Response)

CCloud_BeginHTTPUpload_Request = _reflection.GeneratedProtocolMessageType('CCloud_BeginHTTPUpload_Request', (_message.Message,), dict(
  DESCRIPTOR = _CCLOUD_BEGINHTTPUPLOAD_REQUEST,
  __module__ = 'steam.protobufs.steammessages_cloud_steamclient_pb2'
  # @@protoc_insertion_point(class_scope:CCloud_BeginHTTPUpload_Request)
  ))
_sym_db.RegisterMessage(CCloud_BeginHTTPUpload_Request)

CCloud_BeginHTTPUpload_Response = _reflection.GeneratedProtocolMessageType('CCloud_BeginHTTPUpload_Response', (_message.Message,), dict(

  HTTPHeaders = _reflection.GeneratedProtocolMessageType('HTTPHeaders', (_message.Message,), dict(
    DESCRIPTOR = _CCLOUD_BEGINHTTPUPLOAD_RESPONSE_HTTPHEADERS,
    __module__ = 'steam.protobufs.steammessages_cloud_steamclient_pb2'
    # @@protoc_insertion_point(class_scope:CCloud_BeginHTTPUpload_Response.HTTPHeaders)
    ))
  ,
  DESCRIPTOR = _CCLOUD_BEGINHTTPUPLOAD_RESPONSE,
  __module__ = 'steam.protobufs.steammessages_cloud_steamclient_pb2'
  # @@protoc_insertion_point(class_scope:CCloud_BeginHTTPUpload_Response)
  ))
_sym_db.RegisterMessage(CCloud_BeginHTTPUpload_Response)
_sym_db.RegisterMessage(CCloud_BeginHTTPUpload_Response.HTTPHeaders)

CCloud_CommitHTTPUpload_Request = _reflection.GeneratedProtocolMessageType('CCloud_CommitHTTPUpload_Request', (_message.Message,), dict(
  DESCRIPTOR = _CCLOUD_COMMITHTTPUPLOAD_REQUEST,
  __module__ = 'steam.protobufs.steammessages_cloud_steamclient_pb2'
  # @@protoc_insertion_point(class_scope:CCloud_CommitHTTPUpload_Request)
  ))
_sym_db.RegisterMessage(CCloud_CommitHTTPUpload_Request)

CCloud_CommitHTTPUpload_Response = _reflection.GeneratedProtocolMessageType('CCloud_CommitHTTPUpload_Response', (_message.Message,), dict(
  DESCRIPTOR = _CCLOUD_COMMITHTTPUPLOAD_RESPONSE,
  __module__ = 'steam.protobufs.steammessages_cloud_steamclient_pb2'
  # @@protoc_insertion_point(class_scope:CCloud_CommitHTTPUpload_Response)
  ))
_sym_db.RegisterMessage(CCloud_CommitHTTPUpload_Response)

CCloud_GetFileDetails_Request = _reflection.GeneratedProtocolMessageType('CCloud_GetFileDetails_Request', (_message.Message,), dict(
  DESCRIPTOR = _CCLOUD_GETFILEDETAILS_REQUEST,
  __module__ = 'steam.protobufs.steammessages_cloud_steamclient_pb2'
  # @@protoc_insertion_point(class_scope:CCloud_GetFileDetails_Request)
  ))
_sym_db.RegisterMessage(CCloud_GetFileDetails_Request)

CCloud_UserFile = _reflection.GeneratedProtocolMessageType('CCloud_UserFile', (_message.Message,), dict(
  DESCRIPTOR = _CCLOUD_USERFILE,
  __module__ = 'steam.protobufs.steammessages_cloud_steamclient_pb2'
  # @@protoc_insertion_point(class_scope:CCloud_UserFile)
  ))
_sym_db.RegisterMessage(CCloud_UserFile)

CCloud_GetFileDetails_Response = _reflection.GeneratedProtocolMessageType('CCloud_GetFileDetails_Response', (_message.Message,), dict(
  DESCRIPTOR = _CCLOUD_GETFILEDETAILS_RESPONSE,
  __module__ = 'steam.protobufs.steammessages_cloud_steamclient_pb2'
  # @@protoc_insertion_point(class_scope:CCloud_GetFileDetails_Response)
  ))
_sym_db.RegisterMessage(CCloud_GetFileDetails_Response)

CCloud_EnumerateUserFiles_Request = _reflection.GeneratedProtocolMessageType('CCloud_EnumerateUserFiles_Request', (_message.Message,), dict(
  DESCRIPTOR = _CCLOUD_ENUMERATEUSERFILES_REQUEST,
  __module__ = 'steam.protobufs.steammessages_cloud_steamclient_pb2'
  # @@protoc_insertion_point(class_scope:CCloud_EnumerateUserFiles_Request)
  ))
_sym_db.RegisterMessage(CCloud_EnumerateUserFiles_Request)

CCloud_EnumerateUserFiles_Response = _reflection.GeneratedProtocolMessageType('CCloud_EnumerateUserFiles_Response', (_message.Message,), dict(
  DESCRIPTOR = _CCLOUD_ENUMERATEUSERFILES_RESPONSE,
  __module__ = 'steam.protobufs.steammessages_cloud_steamclient_pb2'
  # @@protoc_insertion_point(class_scope:CCloud_EnumerateUserFiles_Response)
  ))
_sym_db.RegisterMessage(CCloud_EnumerateUserFiles_Response)

CCloud_Delete_Request = _reflection.GeneratedProtocolMessageType('CCloud_Delete_Request', (_message.Message,), dict(
  DESCRIPTOR = _CCLOUD_DELETE_REQUEST,
  __module__ = 'steam.protobufs.steammessages_cloud_steamclient_pb2'
  # @@protoc_insertion_point(class_scope:CCloud_Delete_Request)
  ))
_sym_db.RegisterMessage(CCloud_Delete_Request)

CCloud_Delete_Response = _reflection.GeneratedProtocolMessageType('CCloud_Delete_Response', (_message.Message,), dict(
  DESCRIPTOR = _CCLOUD_DELETE_RESPONSE,
  __module__ = 'steam.protobufs.steammessages_cloud_steamclient_pb2'
  # @@protoc_insertion_point(class_scope:CCloud_Delete_Response)
  ))
_sym_db.RegisterMessage(CCloud_Delete_Response)

CCloud_GetClientEncryptionKey_Request = _reflection.GeneratedProtocolMessageType('CCloud_GetClientEncryptionKey_Request', (_message.Message,), dict(
  DESCRIPTOR = _CCLOUD_GETCLIENTENCRYPTIONKEY_REQUEST,
  __module__ = 'steam.protobufs.steammessages_cloud_steamclient_pb2'
  # @@protoc_insertion_point(class_scope:CCloud_GetClientEncryptionKey_Request)
  ))
_sym_db.RegisterMessage(CCloud_GetClientEncryptionKey_Request)

CCloud_GetClientEncryptionKey_Response = _reflection.GeneratedProtocolMessageType('CCloud_GetClientEncryptionKey_Response', (_message.Message,), dict(
  DESCRIPTOR = _CCLOUD_GETCLIENTENCRYPTIONKEY_RESPONSE,
  __module__ = 'steam.protobufs.steammessages_cloud_steamclient_pb2'
  # @@protoc_insertion_point(class_scope:CCloud_GetClientEncryptionKey_Response)
  ))
_sym_db.RegisterMessage(CCloud_GetClientEncryptionKey_Response)

CCloud_CDNReport_Notification = _reflection.GeneratedProtocolMessageType('CCloud_CDNReport_Notification', (_message.Message,), dict(
  DESCRIPTOR = _CCLOUD_CDNREPORT_NOTIFICATION,
  __module__ = 'steam.protobufs.steammessages_cloud_steamclient_pb2'
  # @@protoc_insertion_point(class_scope:CCloud_CDNReport_Notification)
  ))
_sym_db.RegisterMessage(CCloud_CDNReport_Notification)

CCloud_ExternalStorageTransferReport_Notification = _reflection.GeneratedProtocolMessageType('CCloud_ExternalStorageTransferReport_Notification', (_message.Message,), dict(
  DESCRIPTOR = _CCLOUD_EXTERNALSTORAGETRANSFERREPORT_NOTIFICATION,
  __module__ = 'steam.protobufs.steammessages_cloud_steamclient_pb2'
  # @@protoc_insertion_point(class_scope:CCloud_ExternalStorageTransferReport_Notification)
  ))
_sym_db.RegisterMessage(CCloud_ExternalStorageTransferReport_Notification)

CCloud_ClientBeginFileUpload_Request = _reflection.GeneratedProtocolMessageType('CCloud_ClientBeginFileUpload_Request', (_message.Message,), dict(
  DESCRIPTOR = _CCLOUD_CLIENTBEGINFILEUPLOAD_REQUEST,
  __module__ = 'steam.protobufs.steammessages_cloud_steamclient_pb2'
  # @@protoc_insertion_point(class_scope:CCloud_ClientBeginFileUpload_Request)
  ))
_sym_db.RegisterMessage(CCloud_ClientBeginFileUpload_Request)

ClientCloudFileUploadBlockDetails = _reflection.GeneratedProtocolMessageType('ClientCloudFileUploadBlockDetails', (_message.Message,), dict(

  HTTPHeaders = _reflection.GeneratedProtocolMessageType('HTTPHeaders', (_message.Message,), dict(
    DESCRIPTOR = _CLIENTCLOUDFILEUPLOADBLOCKDETAILS_HTTPHEADERS,
    __module__ = 'steam.protobufs.steammessages_cloud_steamclient_pb2'
    # @@protoc_insertion_point(class_scope:ClientCloudFileUploadBlockDetails.HTTPHeaders)
    ))
  ,
  DESCRIPTOR = _CLIENTCLOUDFILEUPLOADBLOCKDETAILS,
  __module__ = 'steam.protobufs.steammessages_cloud_steamclient_pb2'
  # @@protoc_insertion_point(class_scope:ClientCloudFileUploadBlockDetails)
  ))
_sym_db.RegisterMessage(ClientCloudFileUploadBlockDetails)
_sym_db.RegisterMessage(ClientCloudFileUploadBlockDetails.HTTPHeaders)

CCloud_ClientBeginFileUpload_Response = _reflection.GeneratedProtocolMessageType('CCloud_ClientBeginFileUpload_Response', (_message.Message,), dict(
  DESCRIPTOR = _CCLOUD_CLIENTBEGINFILEUPLOAD_RESPONSE,
  __module__ = 'steam.protobufs.steammessages_cloud_steamclient_pb2'
  # @@protoc_insertion_point(class_scope:CCloud_ClientBeginFileUpload_Response)
  ))
_sym_db.RegisterMessage(CCloud_ClientBeginFileUpload_Response)

CCloud_ClientCommitFileUpload_Request = _reflection.GeneratedProtocolMessageType('CCloud_ClientCommitFileUpload_Request', (_message.Message,), dict(
  DESCRIPTOR = _CCLOUD_CLIENTCOMMITFILEUPLOAD_REQUEST,
  __module__ = 'steam.protobufs.steammessages_cloud_steamclient_pb2'
  # @@protoc_insertion_point(class_scope:CCloud_ClientCommitFileUpload_Request)
  ))
_sym_db.RegisterMessage(CCloud_ClientCommitFileUpload_Request)

CCloud_ClientCommitFileUpload_Response = _reflection.GeneratedProtocolMessageType('CCloud_ClientCommitFileUpload_Response', (_message.Message,), dict(
  DESCRIPTOR = _CCLOUD_CLIENTCOMMITFILEUPLOAD_RESPONSE,
  __module__ = 'steam.protobufs.steammessages_cloud_steamclient_pb2'
  # @@protoc_insertion_point(class_scope:CCloud_ClientCommitFileUpload_Response)
  ))
_sym_db.RegisterMessage(CCloud_ClientCommitFileUpload_Response)

CCloud_ClientFileDownload_Request = _reflection.GeneratedProtocolMessageType('CCloud_ClientFileDownload_Request', (_message.Message,), dict(
  DESCRIPTOR = _CCLOUD_CLIENTFILEDOWNLOAD_REQUEST,
  __module__ = 'steam.protobufs.steammessages_cloud_steamclient_pb2'
  # @@protoc_insertion_point(class_scope:CCloud_ClientFileDownload_Request)
  ))
_sym_db.RegisterMessage(CCloud_ClientFileDownload_Request)

CCloud_ClientFileDownload_Response = _reflection.GeneratedProtocolMessageType('CCloud_ClientFileDownload_Response', (_message.Message,), dict(

  HTTPHeaders = _reflection.GeneratedProtocolMessageType('HTTPHeaders', (_message.Message,), dict(
    DESCRIPTOR = _CCLOUD_CLIENTFILEDOWNLOAD_RESPONSE_HTTPHEADERS,
    __module__ = 'steam.protobufs.steammessages_cloud_steamclient_pb2'
    # @@protoc_insertion_point(class_scope:CCloud_ClientFileDownload_Response.HTTPHeaders)
    ))
  ,
  DESCRIPTOR = _CCLOUD_CLIENTFILEDOWNLOAD_RESPONSE,
  __module__ = 'steam.protobufs.steammessages_cloud_steamclient_pb2'
  # @@protoc_insertion_point(class_scope:CCloud_ClientFileDownload_Response)
  ))
_sym_db.RegisterMessage(CCloud_ClientFileDownload_Response)
_sym_db.RegisterMessage(CCloud_ClientFileDownload_Response.HTTPHeaders)

CCloud_ClientDeleteFile_Request = _reflection.GeneratedProtocolMessageType('CCloud_ClientDeleteFile_Request', (_message.Message,), dict(
  DESCRIPTOR = _CCLOUD_CLIENTDELETEFILE_REQUEST,
  __module__ = 'steam.protobufs.steammessages_cloud_steamclient_pb2'
  # @@protoc_insertion_point(class_scope:CCloud_ClientDeleteFile_Request)
  ))
_sym_db.RegisterMessage(CCloud_ClientDeleteFile_Request)

CCloud_ClientDeleteFile_Response = _reflection.GeneratedProtocolMessageType('CCloud_ClientDeleteFile_Response', (_message.Message,), dict(
  DESCRIPTOR = _CCLOUD_CLIENTDELETEFILE_RESPONSE,
  __module__ = 'steam.protobufs.steammessages_cloud_steamclient_pb2'
  # @@protoc_insertion_point(class_scope:CCloud_ClientDeleteFile_Response)
  ))
_sym_db.RegisterMessage(CCloud_ClientDeleteFile_Response)

CCloud_ClientConflictResolution_Notification = _reflection.GeneratedProtocolMessageType('CCloud_ClientConflictResolution_Notification', (_message.Message,), dict(
  DESCRIPTOR = _CCLOUD_CLIENTCONFLICTRESOLUTION_NOTIFICATION,
  __module__ = 'steam.protobufs.steammessages_cloud_steamclient_pb2'
  # @@protoc_insertion_point(class_scope:CCloud_ClientConflictResolution_Notification)
  ))
_sym_db.RegisterMessage(CCloud_ClientConflictResolution_Notification)

CCloud_EnumerateUserApps_Request = _reflection.GeneratedProtocolMessageType('CCloud_EnumerateUserApps_Request', (_message.Message,), dict(
  DESCRIPTOR = _CCLOUD_ENUMERATEUSERAPPS_REQUEST,
  __module__ = 'steam.protobufs.steammessages_cloud_steamclient_pb2'
  # @@protoc_insertion_point(class_scope:CCloud_EnumerateUserApps_Request)
  ))
_sym_db.RegisterMessage(CCloud_EnumerateUserApps_Request)

CCloud_EnumerateUserApps_Response = _reflection.GeneratedProtocolMessageType('CCloud_EnumerateUserApps_Response', (_message.Message,), dict(

  Apps = _reflection.GeneratedProtocolMessageType('Apps', (_message.Message,), dict(
    DESCRIPTOR = _CCLOUD_ENUMERATEUSERAPPS_RESPONSE_APPS,
    __module__ = 'steam.protobufs.steammessages_cloud_steamclient_pb2'
    # @@protoc_insertion_point(class_scope:CCloud_EnumerateUserApps_Response.Apps)
    ))
  ,
  DESCRIPTOR = _CCLOUD_ENUMERATEUSERAPPS_RESPONSE,
  __module__ = 'steam.protobufs.steammessages_cloud_steamclient_pb2'
  # @@protoc_insertion_point(class_scope:CCloud_EnumerateUserApps_Response)
  ))
_sym_db.RegisterMessage(CCloud_EnumerateUserApps_Response)
_sym_db.RegisterMessage(CCloud_EnumerateUserApps_Response.Apps)


DESCRIPTOR._options = None
_CCLOUD_GETUPLOADSERVERINFO_REQUEST.fields_by_name['appid']._options = None
_CCLOUD_BEGINHTTPUPLOAD_REQUEST.fields_by_name['appid']._options = None
_CCLOUD_BEGINHTTPUPLOAD_REQUEST.fields_by_name['file_size']._options = None
_CCLOUD_BEGINHTTPUPLOAD_REQUEST.fields_by_name['filename']._options = None
_CCLOUD_BEGINHTTPUPLOAD_REQUEST.fields_by_name['file_sha']._options = None
_CCLOUD_BEGINHTTPUPLOAD_REQUEST.fields_by_name['is_public']._options = None
_CCLOUD_BEGINHTTPUPLOAD_REQUEST.fields_by_name['platforms_to_sync']._options = None
_CCLOUD_BEGINHTTPUPLOAD_REQUEST.fields_by_name['request_headers_names']._options = None
_CCLOUD_BEGINHTTPUPLOAD_REQUEST.fields_by_name['request_headers_values']._options = None
_CCLOUD_BEGINHTTPUPLOAD_RESPONSE.fields_by_name['ugcid']._options = None
_CCLOUD_BEGINHTTPUPLOAD_RESPONSE.fields_by_name['timestamp']._options = None
_CCLOUD_BEGINHTTPUPLOAD_RESPONSE.fields_by_name['url_host']._options = None
_CCLOUD_BEGINHTTPUPLOAD_RESPONSE.fields_by_name['url_path']._options = None
_CCLOUD_BEGINHTTPUPLOAD_RESPONSE.fields_by_name['use_https']._options = None
_CCLOUD_BEGINHTTPUPLOAD_RESPONSE.fields_by_name['request_headers']._options = None
_CCLOUD_COMMITHTTPUPLOAD_REQUEST.fields_by_name['transfer_succeeded']._options = None
_CCLOUD_COMMITHTTPUPLOAD_REQUEST.fields_by_name['appid']._options = None
_CCLOUD_COMMITHTTPUPLOAD_REQUEST.fields_by_name['file_sha']._options = None
_CCLOUD_COMMITHTTPUPLOAD_REQUEST.fields_by_name['filename']._options = None
_CCLOUD_COMMITHTTPUPLOAD_RESPONSE.fields_by_name['file_committed']._options = None
_CCLOUD_GETFILEDETAILS_REQUEST.fields_by_name['ugcid']._options = None
_CCLOUD_GETFILEDETAILS_REQUEST.fields_by_name['appid']._options = None
_CCLOUD_ENUMERATEUSERFILES_REQUEST.fields_by_name['appid']._options = None
_CCLOUD_ENUMERATEUSERFILES_REQUEST.fields_by_name['extended_details']._options = None
_CCLOUD_ENUMERATEUSERFILES_REQUEST.fields_by_name['count']._options = None
_CCLOUD_ENUMERATEUSERFILES_REQUEST.fields_by_name['start_index']._options = None
_CCLOUD_DELETE_REQUEST.fields_by_name['appid']._options = None
_CCLOUD_GETCLIENTENCRYPTIONKEY_RESPONSE.fields_by_name['key']._options = None
_CCLOUD_GETCLIENTENCRYPTIONKEY_RESPONSE.fields_by_name['crc']._options = None
_CCLOUD_CLIENTBEGINFILEUPLOAD_REQUEST.fields_by_name['appid']._options = None
_CCLOUD_CLIENTBEGINFILEUPLOAD_REQUEST.fields_by_name['file_size']._options = None
_CCLOUD_CLIENTBEGINFILEUPLOAD_REQUEST.fields_by_name['raw_file_size']._options = None
_CCLOUD_CLIENTBEGINFILEUPLOAD_REQUEST.fields_by_name['file_sha']._options = None
_CCLOUD_CLIENTBEGINFILEUPLOAD_REQUEST.fields_by_name['time_stamp']._options = None
_CCLOUD_CLIENTBEGINFILEUPLOAD_REQUEST.fields_by_name['filename']._options = None
_CCLOUD_CLIENTBEGINFILEUPLOAD_REQUEST.fields_by_name['cell_id']._options = None
_CCLOUD_CLIENTBEGINFILEUPLOAD_REQUEST.fields_by_name['can_encrypt']._options = None
_CCLOUD_CLIENTBEGINFILEUPLOAD_REQUEST.fields_by_name['is_shared_file']._options = None
_CLIENTCLOUDFILEUPLOADBLOCKDETAILS.fields_by_name['url_host']._options = None
_CLIENTCLOUDFILEUPLOADBLOCKDETAILS.fields_by_name['url_path']._options = None
_CLIENTCLOUDFILEUPLOADBLOCKDETAILS.fields_by_name['use_https']._options = None
_CLIENTCLOUDFILEUPLOADBLOCKDETAILS.fields_by_name['http_method']._options = None
_CLIENTCLOUDFILEUPLOADBLOCKDETAILS.fields_by_name['request_headers']._options = None
_CLIENTCLOUDFILEUPLOADBLOCKDETAILS.fields_by_name['block_offset']._options = None
_CLIENTCLOUDFILEUPLOADBLOCKDETAILS.fields_by_name['block_length']._options = None
_CLIENTCLOUDFILEUPLOADBLOCKDETAILS.fields_by_name['explicit_body_data']._options = None
_CLIENTCLOUDFILEUPLOADBLOCKDETAILS.fields_by_name['may_parallelize']._options = None
_CCLOUD_CLIENTBEGINFILEUPLOAD_RESPONSE.fields_by_name['encrypt_file']._options = None
_CCLOUD_CLIENTBEGINFILEUPLOAD_RESPONSE.fields_by_name['block_requests']._options = None
_CCLOUD_CLIENTCOMMITFILEUPLOAD_REQUEST.fields_by_name['transfer_succeeded']._options = None
_CCLOUD_CLIENTCOMMITFILEUPLOAD_REQUEST.fields_by_name['appid']._options = None
_CCLOUD_CLIENTCOMMITFILEUPLOAD_REQUEST.fields_by_name['file_sha']._options = None
_CCLOUD_CLIENTCOMMITFILEUPLOAD_REQUEST.fields_by_name['filename']._options = None
_CCLOUD_CLIENTCOMMITFILEUPLOAD_RESPONSE.fields_by_name['file_committed']._options = None
_CCLOUD_CLIENTFILEDOWNLOAD_REQUEST.fields_by_name['appid']._options = None
_CCLOUD_CLIENTFILEDOWNLOAD_REQUEST.fields_by_name['filename']._options = None
_CCLOUD_CLIENTFILEDOWNLOAD_RESPONSE.fields_by_name['appid']._options = None
_CCLOUD_CLIENTFILEDOWNLOAD_RESPONSE.fields_by_name['file_size']._options = None
_CCLOUD_CLIENTFILEDOWNLOAD_RESPONSE.fields_by_name['raw_file_size']._options = None
_CCLOUD_CLIENTFILEDOWNLOAD_RESPONSE.fields_by_name['sha_file']._options = None
_CCLOUD_CLIENTFILEDOWNLOAD_RESPONSE.fields_by_name['time_stamp']._options = None
_CCLOUD_CLIENTFILEDOWNLOAD_RESPONSE.fields_by_name['is_explicit_delete']._options = None
_CCLOUD_CLIENTFILEDOWNLOAD_RESPONSE.fields_by_name['url_host']._options = None
_CCLOUD_CLIENTFILEDOWNLOAD_RESPONSE.fields_by_name['url_path']._options = None
_CCLOUD_CLIENTFILEDOWNLOAD_RESPONSE.fields_by_name['use_https']._options = None
_CCLOUD_CLIENTFILEDOWNLOAD_RESPONSE.fields_by_name['request_headers']._options = None
_CCLOUD_CLIENTDELETEFILE_REQUEST.fields_by_name['appid']._options = None
_CCLOUD_CLIENTDELETEFILE_REQUEST.fields_by_name['filename']._options = None
_CCLOUD_CLIENTDELETEFILE_REQUEST.fields_by_name['is_explicit_delete']._options = None
_CCLOUD_CLIENTCONFLICTRESOLUTION_NOTIFICATION.fields_by_name['appid']._options = None
_CCLOUD_CLIENTCONFLICTRESOLUTION_NOTIFICATION.fields_by_name['chose_local_files']._options = None

_CLOUD = _descriptor.ServiceDescriptor(
  name='Cloud',
  full_name='Cloud',
  file=DESCRIPTOR,
  index=0,
  serialized_options=_b('\202\265\030%A service for Steam Cloud operations.'),
  serialized_start=7928,
  serialized_end=10275,
  methods=[
  _descriptor.MethodDescriptor(
    name='GetUploadServerInfo',
    full_name='Cloud.GetUploadServerInfo',
    index=0,
    containing_service=None,
    input_type=_CCLOUD_GETUPLOADSERVERINFO_REQUEST,
    output_type=_CCLOUD_GETUPLOADSERVERINFO_RESPONSE,
    serialized_options=_b('\202\265\0306Returns the URL of the proper cloud server for a user.'),
  ),
  _descriptor.MethodDescriptor(
    name='BeginHTTPUpload',
    full_name='Cloud.BeginHTTPUpload',
    index=1,
    containing_service=None,
    input_type=_CCLOUD_BEGINHTTPUPLOAD_REQUEST,
    output_type=_CCLOUD_BEGINHTTPUPLOAD_RESPONSE,
    serialized_options=_b('\202\265\030\314\001Begins the process of uploading a file to Steam external storage services. File should be uploaded via HTTP PUT to the returned URL, after which the upload must be finalized by a call to CommitHTTPUpload.'),
  ),
  _descriptor.MethodDescriptor(
    name='CommitHTTPUpload',
    full_name='Cloud.CommitHTTPUpload',
    index=2,
    containing_service=None,
    input_type=_CCLOUD_COMMITHTTPUPLOAD_REQUEST,
    output_type=_CCLOUD_COMMITHTTPUPLOAD_RESPONSE,
    serialized_options=_b('\202\265\030PCommits a file upload initiated by BeginHTTPUpload and transferred via HTTP PUT.'),
  ),
  _descriptor.MethodDescriptor(
    name='GetFileDetails',
    full_name='Cloud.GetFileDetails',
    index=3,
    containing_service=None,
    input_type=_CCLOUD_GETFILEDETAILS_REQUEST,
    output_type=_CCLOUD_GETFILEDETAILS_RESPONSE,
    serialized_options=_b('\202\265\030 Returns details on a Cloud file.'),
  ),
  _descriptor.MethodDescriptor(
    name='EnumerateUserFiles',
    full_name='Cloud.EnumerateUserFiles',
    index=4,
    containing_service=None,
    input_type=_CCLOUD_ENUMERATEUSERFILES_REQUEST,
    output_type=_CCLOUD_ENUMERATEUSERFILES_RESPONSE,
    serialized_options=_b('\202\265\030WEnumerates Cloud files for a user of a given app ID. Returns up to 500 files at a time.'),
  ),
  _descriptor.MethodDescriptor(
    name='Delete',
    full_name='Cloud.Delete',
    index=5,
    containing_service=None,
    input_type=_CCLOUD_DELETE_REQUEST,
    output_type=_CCLOUD_DELETE_RESPONSE,
    serialized_options=_b('\202\265\030%Deletes a file from the user\'s cloud.'),
  ),
  _descriptor.MethodDescriptor(
    name='GetClientEncryptionKey',
    full_name='Cloud.GetClientEncryptionKey',
    index=6,
    containing_service=None,
    input_type=_CCLOUD_GETCLIENTENCRYPTIONKEY_REQUEST,
    output_type=_CCLOUD_GETCLIENTENCRYPTIONKEY_RESPONSE,
    serialized_options=_b('\202\265\030*Gets the user\'s Cloud file encryption key.'),
  ),
  _descriptor.MethodDescriptor(
    name='CDNReport',
    full_name='Cloud.CDNReport',
    index=7,
    containing_service=None,
    input_type=_CCLOUD_CDNREPORT_NOTIFICATION,
    output_type=steam_dot_protobufs_dot_steammessages__unified__base__steamclient__pb2._NORESPONSE,
    serialized_options=_b('\202\265\030%Reports the result of a CDN transfer.'),
  ),
  _descriptor.MethodDescriptor(
    name='ExternalStorageTransferReport',
    full_name='Cloud.ExternalStorageTransferReport',
    index=8,
    containing_service=None,
    input_type=_CCLOUD_EXTERNALSTORAGETRANSFERREPORT_NOTIFICATION,
    output_type=steam_dot_protobufs_dot_steammessages__unified__base__steamclient__pb2._NORESPONSE,
    serialized_options=_b('\202\265\0309Reports the result of an external Cloud storage transfer.'),
  ),
  _descriptor.MethodDescriptor(
    name='ClientBeginFileUpload',
    full_name='Cloud.ClientBeginFileUpload',
    index=9,
    containing_service=None,
    input_type=_CCLOUD_CLIENTBEGINFILEUPLOAD_REQUEST,
    output_type=_CCLOUD_CLIENTBEGINFILEUPLOAD_RESPONSE,
    serialized_options=_b('\202\265\030\034Initiate an upload to Cloud.'),
  ),
  _descriptor.MethodDescriptor(
    name='ClientCommitFileUpload',
    full_name='Cloud.ClientCommitFileUpload',
    index=10,
    containing_service=None,
    input_type=_CCLOUD_CLIENTCOMMITFILEUPLOAD_REQUEST,
    output_type=_CCLOUD_CLIENTCOMMITFILEUPLOAD_RESPONSE,
    serialized_options=_b('\202\265\030+Commit the file upload or indicate failure.'),
  ),
  _descriptor.MethodDescriptor(
    name='ClientFileDownload',
    full_name='Cloud.ClientFileDownload',
    index=11,
    containing_service=None,
    input_type=_CCLOUD_CLIENTFILEDOWNLOAD_REQUEST,
    output_type=_CCLOUD_CLIENTFILEDOWNLOAD_RESPONSE,
    serialized_options=_b('\202\265\030\031Initiate a file download.'),
  ),
  _descriptor.MethodDescriptor(
    name='ClientDeleteFile',
    full_name='Cloud.ClientDeleteFile',
    index=12,
    containing_service=None,
    input_type=_CCLOUD_CLIENTDELETEFILE_REQUEST,
    output_type=_CCLOUD_CLIENTDELETEFILE_RESPONSE,
    serialized_options=_b('\202\265\030\030Delete or forget a file.'),
  ),
  _descriptor.MethodDescriptor(
    name='ClientConflictResolution',
    full_name='Cloud.ClientConflictResolution',
    index=13,
    containing_service=None,
    input_type=_CCLOUD_CLIENTCONFLICTRESOLUTION_NOTIFICATION,
    output_type=steam_dot_protobufs_dot_steammessages__unified__base__steamclient__pb2._NORESPONSE,
    serialized_options=_b('\202\265\0302User has picked a resolution for a Cloud conflict.'),
  ),
  _descriptor.MethodDescriptor(
    name='EnumerateUserApps',
    full_name='Cloud.EnumerateUserApps',
    index=14,
    containing_service=None,
    input_type=_CCLOUD_ENUMERATEUSERAPPS_REQUEST,
    output_type=_CCLOUD_ENUMERATEUSERAPPS_RESPONSE,
    serialized_options=_b('\202\265\030/Enumerates apps stroing cloud files for a user.'),
  ),
])
_sym_db.RegisterServiceDescriptor(_CLOUD)

DESCRIPTOR.services_by_name['Cloud'] = _CLOUD

# @@protoc_insertion_point(module_scope)
